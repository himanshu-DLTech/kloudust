{
"id": "createobjectstorage",
"command": "createVM",
"type": "kloudust_cmdline",
"kloudust_cmdline_params": ["vm_name", "vm_description", "cores", "memory", "disk", "vlan", "creation_image_name", "cloudinit_data", 
    "force_overwrite", "cores", "memory", "additional_params" , "vmtype", "no_qemu_agent", "host_overwrite"],

"title": "{{{i18n.VMCreateTitle}}}",

"i18n": {
    "en": {
        "VMCreateTitle": "Create Object storage",
        "VMCreateDescription": "Add a new Object storage instance to the cloud. Complete the required tab then submit or review advanced tab for full customization.",
        "VMName": "Object storage instance name",
        "VMDescription": "Description",
        "VMDisk": "Disk in gigabytes",
        "FieldValidationErrorGeneric": "Validation error",
        "FieldValidationErrorMin40": "Minimum disk size is 40 GB",
        "CreatStorageSubmitLable": "Create",
        "VMYes": "Yes",
        "VMNo": "No",
        "VMAdvanced": "Advanced",
        "VMOverwriteForce": "Overwrite if an object storage instance by the same name exists?",
        "VMOverwriteHostname": "Hostname to force host (else leave blank)",
        "StorageAdminID": "Storage Admin ID",
        "StorageAdminPassword": "Storage Admin Password",
        "SSL": "Select as Yes if you want to enable SSL",
        "SSL_Key": "Paste the SSL Key here (required if SSL is enabled)",
        "SSL_Cert": "Paste the Certificate here (required if SSL is enabled)"
    },
    "hi": {
        "VMCreateTitle": "Create Object storage",
        "VMCreateDescription": "Add a new Object storage instance to the cloud. Complete the required tab then submit or review advanced tab for full customization.",
        "VMName": "Object storage instance name",
        "VMDescription": "Description",
        "VMDisk": "Disk in gigabytes",
        "FieldValidationErrorGeneric": "Validation error",
        "FieldValidationErrorMin40": "Minimum disk size is 40 GB",
        "CreatStorageSubmitLable": "Create",
        "VMYes": "Yes",
        "VMNo": "No",
        "VMAdvanced": "Advanced",
        "VMOverwriteForce": "Overwrite if an object storage instance by the same name exists?",
        "VMOverwriteHostname": "Hostname to force host (else leave blank)",
        "StorageAdminID": "Storage Admin ID",
        "StorageAdminPassword": "Storage Admin Password",
        "SSL": "Select as Yes if you want to enable SSL",
        "SSL_Key": "Paste the SSL Key here (required if SSL is enabled)",
        "SSL_Cert": "Paste the Certificate here (required if SSL is enabled)"
    },
    "ja": {
        "VMCreateTitle": "Create Object storage",
        "VMCreateDescription": "Add a new Object storage instance to the cloud. Complete the required tab then submit or review advanced tab for full customization.",
        "VMName": "Object storage instance name",
        "VMDescription": "Description",
        "VMDisk": "Disk in gigabytes",
        "FieldValidationErrorGeneric": "Validation error",
        "FieldValidationErrorMin40": "Minimum disk size is 40 GB",
        "CreatStorageSubmitLable": "Create",
        "VMYes": "Yes",
        "VMNo": "No",
        "VMAdvanced": "Advanced",
        "VMOverwriteForce": "Overwrite if an object storage instance by the same name exists?",
        "VMOverwriteHostname": "Hostname to force host (else leave blank)",
        "StorageAdminID": "Storage Admin ID",
        "StorageAdminPassword": "Storage Admin Password",
        "SSL": "Select as Yes if you want to enable SSL",
        "SSL_Key": "Paste the SSL Key here (required if SSL is enabled)",
        "SSL_Cert": "Paste the Certificate here (required if SSL is enabled)"
    },
    "zh": {
        "VMCreateTitle": "Create Object storage",
        "VMCreateDescription": "Add a new Object storage instance to the cloud. Complete the required tab then submit or review advanced tab for full customization.",
        "VMName": "Object storage instance name",
        "VMDescription": "Description",
        "VMDisk": "Disk in gigabytes",
        "FieldValidationErrorGeneric": "Validation error",
        "FieldValidationErrorMin40": "Minimum disk size is 40 GB",
        "CreatStorageSubmitLable": "Create",
        "VMYes": "Yes",
        "VMNo": "No",
        "VMAdvanced": "Advanced",
        "VMOverwriteForce": "Overwrite if an object storage instance by the same name exists?",
        "VMOverwriteHostname": "Hostname to force host (else leave blank)",
        "StorageAdminID": "Storage Admin ID",
        "StorageAdminPassword": "Storage Admin Password",
        "SSL": "Select as Yes if you want to enable SSL",
        "SSL_Key": "Paste the SSL Key here (required if SSL is enabled)",
        "SSL_Cert": "Paste the Certificate here (required if SSL is enabled)"
    }
},

"form": {
    "description": "{{{i18n.VMCreateDescription}}}",

    "required_label": "{{{i18n.Required}}}",
    "required_fields": [
    {"id": "vm_name", "type": "text", "placeholder": "{{{i18n.VMName}}}", "required": true, 
        "pattern":"\\s*\\w+\\s*", "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"},
    {"id": "vm_description", "type": "text", "placeholder": "{{{i18n.VMDescription}}}", "required": true},
    {"id": "cores", "type": "hidden", "value": 2},
    {"id": "memory", "type": "hidden", "value": 2048},
    {"id": "disk", "type": "number", "placeholder": "{{{i18n.VMDisk}}}", "required": true, "min": 40,
        "validation_error": "{{{i18n.FieldValidationErrorMin40}}}"},

    {"id": "adminid", "type": "hidden", "value": "storageadmin"},
    {"id": "adminpass", "type": "hidden", "value": "8166faae1cac0f8fb18a3c1b5ee7561102b71d006768a1199dde6cbe407d35f561e2d2a6"},
    {"id": "creation_image_name", "type": "hidden", "value": "kd_object_storage_service"},

    {"id": "vlan", "multioption": true, "type": "select", "label": "{{{i18n.vlan}}}", "options":[]},
    {"id": "storageAdminID", "type": "text", "required": true, "placeholder": "{{{i18n.StorageAdminID}}}", 
        "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"},
    {"id": "storageAdminPassword", "type": "text", "required": true, "placeholder": "{{{i18n.StorageAdminPassword}}}", 
        "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"}
    ],

    "optional_label": "{{{i18n.VMAdvanced}}}",
    "optional_fields": [
    {"id": "additional_params", "type": "hidden", "value": ""},
    {"id": "no_qemu_agent", "type": "hidden", "value": "false"},
    {"id": "force_overwrite", "multioption": true, "type": "select", "label": "{{{i18n.VMOverwriteForce}}}", 
        "options":[{"value":"false", "label":"{{{i18n.VMNo}}}"}, {"value":"true", "label":"{{{i18n.VMYes}}}"}]},
    {"id": "host_overwrite", "type": "text", "placeholder": "{{{i18n.VMOverwriteHostname}}}", "value":"",
        "pattern":"\\s[0-9a-zA-Z]+\\s", "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"},
    {"id": "ssl", "multioption": true, "type": "select", "label": "{{{i18n.SSL}}}", 
        "options":[{"value":"false", "label":"{{{i18n.VMNo}}}"}, {"value":"true", "label":"{{{i18n.VMYes}}}"}]},
    {"id": "sslKey", "inputtype": "textarea", "type": "text", "placeholder": "{{{i18n.SSL_Key}}}", "validation_error": "{{{i18nFieldValidationErrorGeneric}}}"},
    {"id": "sslCrt", "inputtype": "textarea", "type": "text", "placeholder": "{{{i18n.SSL_Cert}}}", "validation_error": "{{{i18nFieldValidationErrorGeneric}}}"}
    ],

    "load_javascript": [
        "const form = arguments[0]||{};",
        "const vlanResult = await window.monkshu_env.frameworklibs.apimanager.rest(APP_CONSTANTS.API_KLOUDUSTCMD, ",
        "   'POST', {cmd: 'listVlans'}, true);",
        "if (vlanResult.result) for (const v of vlanResult.resources) { ",
        "   const vlan = form.required_fields[form.required_fields.length-3];",
        "   vlan.options.push({value: v.name,label: v.name}); }",
        "return form;"
    ],

    "submitlabel": "{{{i18n.CreatStorageSubmitLable}}}",

    "submit_javascript": [
        "const retObject = arguments[0]||{};",
        "let cloudinitTemplate = '';",
        "if (retObject.ssl == 'true') {",
        "    retObject.sslCrt = retObject.sslCrt.replace('\\n', '__NEWLINE__');",
        "    retObject.sslKey = retObject.sslKey.replace('\\n', '__NEWLINE__');",
        "    if(retObject.sslCrt.endsWith('__NEWLINE__') retObject.sslCrt = retObject.sslCrt + '__NEWLINE__';",
        "    if(retObject.sslKey.endsWith('__NEWLINE__') retObject.sslKey = retObject.sslCrt + '__NEWLINE__';",
        "    cloudinitTemplate = \"{system_info: {default_user: {name: \\u{007B}\\u{007B}\\u{007B}adminid\\u{007D}\\u{007D}\\u{007D}, home: /home/\\u{007B}\\u{007B}\\u{007B}adminid\\u{007D}\\u{007D}\\u{007D}, sudo: 'ALL=(ALL) NOPASSWD:ALL'}}, password: \\u{007B}\\u{007B}\\u{007B}adminpass\\u{007D}\\u{007D}\\u{007D}, chpasswd: {expire: false}, hostname: \\u{007B}\\u{007B}\\u{007B}vm_name\\u{007D}\\u{007D}\\u{007D}, ssh_pwauth: true, package_upgrade: true, packages: [net-tools], runcmd: [['mkdir', '-p', '/etc/minio/certs'], ['curl', '-X', 'POST', 'http://165.232.187.123:8080/save', '-H', 'Content-Type: text/plain', '--data', 'private.key__CONTENT__\\u{007B}\\u{007B}\\u{007B}sslKey\\u{007D}\\u{007D}\\u{007D}'], ['wget', '-O', '/etc/minio/certs/private.key', 'http://165.232.187.123:8080/download/private.key'], ['curl', '-X', 'POST', 'http://165.232.187.123:8080/save', '-H', 'Content-Type: text/plain', '--data', 'public.crt__CONTENT__\\u{007B}\\u{007B}\\u{007B}sslCrt\\u{007D}\\u{007D}\\u{007D}'], ['wget', '-O', '/etc/minio/certs/public.crt', 'http://165.232.187.123:8080/download/public.crt'], ['curl', '-X', 'POST', 'http://165.232.187.123:8080/save', '-H', 'Content-Type: text/plain', '--data', 'minio__CONTENT__MINIO_ROOT_USER=test__NEWLINE__MINIO_ROOT_PASSWORD=test__NEWLINE__MINIO_VOLUMES=__QUOTE__/kdstorage__QUOTE____NEWLINE__MINIO_OPTS=__QUOTE__--console-address :9001 --certs-dir /etc/minio/certs__QUOTE__'], ['wget', '-O', '/etc/default/minio', 'http://165.232.187.123:8080/download/minio'], ['systemctl','start','kdstorage.service']]}\"",
        "}",
        "else cloudinitTemplate = \"{system_info: {default_user: {name: \\u{007B}\\u{007B}\\u{007B}adminid\\u{007D}\\u{007D}\\u{007D}, home: /home/\\u{007B}\\u{007B}\\u{007B}adminid\\u{007D}\\u{007D}\\u{007D}, sudo: 'ALL=(ALL) NOPASSWD:ALL'}}, password: \\u{007B}\\u{007B}\\u{007B}adminpass\\u{007D}\\u{007D}\\u{007D}, chpasswd: {expire: false}, hostname: \\u{007B}\\u{007B}\\u{007B}vm_name\\u{007D}\\u{007D}\\u{007D}, ssh_pwauth: true, package_upgrade: true, packages: [net-tools], runcmd: [['sed','-i','s/^MINIO_ROOT_USER=.*/MINIO_ROOT_USER=\\u{007B}\\u{007B}\\u{007B}storageAdminID\\u{007D}\\u{007D}\\u{007D}/','/etc/default/minio'],['sed','-i','s/^MINIO_ROOT_PASSWORD=.*/MINIO_ROOT_PASSWORD=\\u{007B}\\u{007B}\\u{007B}storageAdminPassword\\u{007D}\\u{007D}\\u{007D}/','/etc/default/minio'],['systemctl','start','kdstorage.service']]}\";",
        "const router = (await import(\"/framework/js/router.mjs\")).router;",
        "const mustache = await router.getMustache();",
        "const cloudInit = mustache.render(cloudinitTemplate, retObject);",
        "LOG.info(`Generated cloudinit is: ${cloudInit}`);",
        "retObject.cloudinit_data = cloudInit;",
        "retObject.vmtype = APP_CONSTANTS.VM_TYPE_OBJECT_STORAGE || 'storage3';",
        "if (retObject.override_host && retObject.override_host.trim() == '') delete retObject.override_host;",
        "return true;"
    ]
}

}