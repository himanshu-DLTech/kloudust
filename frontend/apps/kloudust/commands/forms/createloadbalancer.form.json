{
    "id": "createloadbalancer",
    "command": "createLoadBalancer",
    "type": "kloudust_cmdline",
    "kloudust_cmdline_params": ["vm_name", "vm_description", "cores", "memory", "disk","vlan", "creation_image_name", "cloudinit_data","force_overwrite", "maxcores", "maxmemory", "additional_params", "vmtype", "no_qemu_agent","override_host","servers"],
    
    "title": "{{{i18n.FirewallTitle}}}",
    
    "i18n": {
        "en": {
            "VMName": "Object storage instance name",
            "VMDescription": "Description",
            "VMCores": "Cores",
            "VMMemory": "Memory in megabytes",
            "VMDisk": "Disk in gigabytes",
            "VMOverwriteHostname": "Hostname to force host (else leave blank)",
            "VMAdvanced": "Advanced",
            "VMOptional": "Optional",
            "FieldValidationErrorMin40": "Minimum disk size is 40 GB",
            "FirewallTitle": "Firewall Ruleset",
            "FirewallDescription": "Create a load balancer",
            "FirewallName": "Name",
            "FieldValidationErrorGeneric": "Validation error",
            "FirewallSubmitLabel": "Save",
            "loadBalancerName":"Load Balancer Name",
            "choose_layer":"choose layer",
            "Port": "Select Port",
            "SSL": "Select as Yes if you want to enable SSL, Only valid with HTTP layer, else ssl will be dropped.",
            "SSL_Key": "Paste the SSL Key here (required if SSL is enabled)",
            "SSL_Cert": "Paste the Certificate here (required if SSL is enabled)",
            "VMYes": "Yes",
            "VMNo": "No"
        },
        "hi": {
            "FirewallTitle": "Firewall Ruleset",
            "FirewallDescription": "Create a firewall ruleset. A firewall ruleset is comparable to physical firewalls and safeguards the assets in a virtual network. Complete the required fields and then review + create to create a new firewall ruleset.",
            "FirewallName": "नाम",
            "FieldValidationErrorGeneric": "Validation error",
            "FirewallSubmitLabel": "Save"
        },
        "ja": {
            "FirewallTitle": "Firewall Ruleset",
            "FirewallDescription": "Create a firewall ruleset. A firewall ruleset is comparable to physical firewalls and safeguards the assets in a virtual network. Complete the required fields and then review + create to create a new firewall ruleset.",
            "FirewallName": "名",
            "FieldValidationErrorGeneric": "Validation error",
            "FirewallSubmitLabel": "Save"
        },
        "zh": {
            "FirewallTitle": "Firewall Ruleset",
            "FirewallDescription": "Create a firewall ruleset. A firewall ruleset is comparable to physical firewalls and safeguards the assets in a virtual network. Complete the required fields and then review + create to create a new firewall ruleset.",
            "FirewallName": "姓名",
            "FieldValidationErrorGeneric": "Validation error",
            "FirewallSubmitLabel": "Save"
        }
    },
    
    "form": {
        "description": "{{{i18n.FirewallDescription}}}",
    
        "required_label": "{{{i18n.Required}}}",
        
        "required_fields": [
        {"id": "vm_name", "type": "text", "placeholder": "{{{i18n.loadBalancerName}}}", "required": true, 
            "pattern":"\\s[0-9a-zA-Z-]+\\s", "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"},
        {"id": "vm_description", "type": "text", "placeholder": "{{{i18n.VMDescription}}}", "required": true},
        {"id": "cores", "type": "hidden", "value": 1},
        {"id": "memory", "type": "hidden", "value": 1024},
        {"id": "disk", "type": "hidden","value": 40 },
        {"id": "vlan", "multioption": true, "type": "select", "label": "{{{i18n.vlan}}}", 
            "options":[]},
        {"id": "creation_image_name", "type": "hidden", "value": "load_balancer_service"},
        {"id": "vmtype", "type": "hidden", "value": "loadbalanceraas"},
        {"id": "maxcores", "type": "hidden","value":""},
        {"id": "maxmemory", "type": "hidden", "value":""},
        {"id": "additional_params"  , "type": "hidden", "value":""},
        {"id": "no_qemu_agent", "type": "hidden", "value":"false"},
        {"id": "force_overwrite", "type": "hidden", "value":"false"},
        {"id": "override_host", "type": "hidden", "value":""},
    
    
    
    
        {"id": "loadbalancer_creds", "type": "hidden", "value":"[]"},
        {"id": "choose_layer", "multioption": true, "type": "select", "label": "{{{i18n.choose_layer}}}", 
            "options":[{"value":"tcp", "label":"TCP"}, {"value":"http", "label":"HTTP"}]},
        {"id": "loadBalancerComponent", "inputtype": "load-balancer", 
            "style":"body{background-color: #4C4C4C; color: #DCDCDC} select option{background-color: #4c4c4cc9; color: #DCDCDC} input::placeholder{color: #DCDCDC} span.roundbutton{border: 1px solid #DCDCDC}"},
        {"id": "port", "type": "text", "placeholder": "{{{i18n.Port}}}", "required": true, 
            "pattern":"\\s[0-9-]+\\s", "validation_error": "{{{i18n.FieldValidationErrorGeneric}}}"}
        ],
    
        "optional_label": "{{{i18n.VMOptional}}}",
        "optional_fields": [
        {"id": "ssl", "multioption": true, "type": "select", "label": "{{{i18n.SSL}}}", 
        "options":[{"value":"false", "label":"{{{i18n.VMNo}}}"}, {"value":"true", "label":"{{{i18n.VMYes}}}"}]},
        {"id": "sslKey", "inputtype": "textarea", "type": "text", "placeholder": "{{{i18n.SSL_Key}}}", "validation_error": "{{{i18nFieldValidationErrorGeneric}}}"},
        {"id": "sslCrt", "inputtype": "textarea", "type": "text", "placeholder": "{{{i18n.SSL_Cert}}}", "validation_error": "{{{i18nFieldValidationErrorGeneric}}}"}],
    
        "submitlabel": "{{{i18n.FirewallSubmitLabel}}}",
    
        "load_javascript": [
            "const form = arguments[0]||{};",
            "const vlanResult = await window.monkshu_env.frameworklibs.apimanager.rest(APP_CONSTANTS.API_KLOUDUSTCMD, ",
            "   'POST', {cmd: 'listVlans'}, true);",
            "if (vlanResult.result) for (const v of vlanResult.resources) { ",
            "   const vlan = form.required_fields[form.required_fields.length-13];",
            "   vlan.options.push({value: v.name,label: v.name}); }",
            "return form;"
        ],
    
        "submit_javascript":[
            "const retObject = arguments[0]||{};",
            "const ans = monkshu_env.components['load-balancer'].values()",
            "retObject.servers = ans", 
            "retObject.loadbalancer_creds = ans.split('|').map((i,index)=>({index : index, server : i.split(',').join(':'),add_space : index!=ans.split('|').length - 1}))",
            "console.log(retObject.loadbalancer_creds)",
            "retObject.sslKey = retObject.sslKey.replaceAll('\\n','__NEWLINE__')", 
            "retObject.sslCrt = retObject.sslCrt.replaceAll('\\n','__NEWLINE__')",
            "retObject.vm_name = retObject.vm_name",
            "if (retObject.choose_layer==='tcp') retObject.ssl = false;",
            "const cloudinitTemplate = \"{system_info: {default_user: {name: __ADMIN_ID__, home: /home/__ADMIN_ID__, sudo: 'ALL=(ALL) NOPASSWD:ALL'}}, password: __ADMIN_PASS__, chpasswd: {expire: false}, hostname: \\u{007B}\\u{007B}\\u{007B}vm_name\\u{007D}\\u{007D}\\u{007D}, ssh_pwauth: true, packages: [net-tools], runcmd: [['curl', '-X', 'POST', 'http://165.232.187.123:8080/save', '-H', 'Content-Type: text/plain', '--data', 'haproxy.cfg__CONTENT__global__NEWLINE__    log /dev/log local0__NEWLINE__    log /dev/log local1 notice__NEWLINE__    daemon__NEWLINE__    maxconn 4096__NEWLINE____NEWLINE__defaults__NEWLINE__    log global__NEWLINE__    mode \\u{007B}\\u{007B}\\u{007B}choose_layer\\u{007D}\\u{007D}\\u{007D}__NEWLINE__    option \\u{007B}\\u{007B}\\u{007B}choose_layer\\u{007D}\\u{007D}\\u{007D}log__NEWLINE__    timeout connect 5s__NEWLINE__    timeout client 50s__NEWLINE__    timeout server 50s__NEWLINE____NEWLINE__frontend http_front__NEWLINE__    bind *:\\u{007B}\\u{007B}\\u{007B}port\\u{007D}\\u{007D}\\u{007D} \\u{007B}\\u{007B}#ssl\\u{007D}\\u{007D}ssl crt /etc/haproxy/certs/ssl.pem\\u{007B}\\u{007B}/ssl\\u{007D}\\u{007D}__NEWLINE__    default_backend web_servers__NEWLINE____NEWLINE__backend web_servers__NEWLINE__    balance roundrobin__NEWLINE__    \\u{007B}\\u{007B}#loadbalancer_creds\\u{007D}\\u{007D}server web\\u{007B}\\u{007B}index\\u{007D}\\u{007D} \\u{007B}\\u{007B}server\\u{007D}\\u{007D} check__NEWLINE__\\u{007B}\\u{007B}#add_space\\u{007D}\\u{007D}    \\u{007B}\\u{007B}/add_space\\u{007D}\\u{007D}\\u{007B}\\u{007B}/loadbalancer_creds\\u{007D}\\u{007D}'], ['wget', '-O', '/etc/haproxy/haproxy.cfg', 'http://165.232.187.123:8080/download/haproxy.cfg'],['mkdir', '-p', '/etc/haproxy/certs'], ['curl', '-X', 'POST', 'http://165.232.187.123:8080/save', '-H', 'Content-Type: text/plain', '--data', 'ssl.pem__CONTENT__\\u{007B}\\u{007B}\\u{007B}sslCrt\\u{007D}\\u{007D}\\u{007D}__NEWLINE__\\u{007B}\\u{007B}\\u{007B}sslKey\\u{007D}\\u{007D}\\u{007D}'], ['wget', '-O', '/etc/haproxy/certs/ssl.pem', 'http://165.232.187.123:8080/download/ssl.pem'],['systemctl', 'start', 'haproxy.service']]}\";",
                "const router = (await import(\"/framework/js/router.mjs\")).router;",
                "const mustache = await router.getMustache();",
                "const cloudInit = mustache.render(cloudinitTemplate, retObject);",
                "LOG.info(`Generated cloudinit is: ${cloudInit}`);",
                "retObject.cloudinit_data = cloudInit;",
            "if (retObject.override_host && retObject.override_host.trim() == '') delete retObject.override_host;",
            "return true"
        ]
    }
    
}
